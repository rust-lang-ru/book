#[derive(Debug, PartialEq, Copy, Clone)]
enum ЦветРубашки {
    Красный,
    Синий,
}

struct Запасы {
    рубашки: Vec<ЦветРубашки>,
}

impl Запасы {
    fn выдать(&self, пользвательский_выборerence: Option<ЦветРубашки>) -> ЦветРубашки {
        пользвательский_выборerence.unwrap_or_else(|| self.most_stocked())
    }

    fn most_stocked(&self) -> ЦветРубашки {
        let mut число_красных = 0;
        let mut число_голубых = 0;

        for цвет in &self.рубашки {
            match цвет {
                ЦветРубашки::Красный => число_красных += 1,
                ЦветРубашки::Синий => число_голубых += 1,
            }
        }
        if число_красных > число_голубых {
            ЦветРубашки::Красный
        } else {
            ЦветРубашки::Синий
        }
    }
}

fn main() {
    let склад = Запасы {
        рубашки: vec![ЦветРубашки::Синий, ЦветРубашки::Красный, ЦветРубашки::Синий],
    };

    let пользвательский_выбор1 = Some(ЦветРубашки::Красный);
    let выдать1 = склад.выдать(пользвательский_выбор1);
    println!(
        "Пользователь выбрал {:?} получил {:?}",
        пользвательский_выбор1, выдать1
    );

    let пользвательский_выбор2 = None;
    let выдать2 = склад.выдать(пользвательский_выбор2);
    println!(
        "Пользователь выбрал {:?} получил {:?}",
        пользвательский_выбор2, выдать2
    );
}
